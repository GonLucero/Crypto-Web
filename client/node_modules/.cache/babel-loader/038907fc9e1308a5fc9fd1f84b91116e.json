{"ast":null,"code":"// 12)\nexport function getVideogames() {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/videogames`).then(response => response.json()).then(json => {\n      dispatch({\n        type: \"GET_VIDEOJUEGOS\",\n        payload: json\n      });\n    });\n  };\n} //   20)\n\nexport const orderByCreator = source => (dispatch, getState) => {\n  const videojuegos = getState().videojuegos.filter(function (G) {\n    return G.source === source;\n  });\n  dispatch({\n    type: \"ORDEN_X_CREADO\",\n    payload: {\n      videojuegos,\n      source\n    }\n  });\n}; //   21)\n\nexport const orderAsc = type => (dispatch, getState) => {\n  const filtered = getState().filteredVideogames;\n  let videogamesOrder = [];\n\n  if (type === \"asc_name\") {\n    videogamesOrder = filtered.sort((a, b) => {\n      if (a.name > b.name) return 1;\n      if (a.name < b.name) return -1;\n      return 0;\n    });\n  } else if (type === \"asc_rating\") {\n    videogamesOrder = filtered.sort((a, b) => a.rating - b.rating);\n  }\n\n  dispatch({\n    type: \"ORDEN_ASC_RATING\",\n    payload: {\n      videogamesOrder,\n      name: type\n    }\n  });\n};\nexport const orderDesc = type => (dispatch, getState) => {\n  const filtrado = getState().filteredVideogames;\n  let videojuegosOrden = [];\n\n  if (type === \"desc_name\") {\n    videojuegosOrden = filtrado.sort((a, b) => {\n      if (a.name < b.name) return 1;\n      if (a.name > b.name) return -1;\n      return 0;\n    });\n  } else if (type === \"desc_rating\") {\n    videojuegosOrden = filtrado.sort((a, b) => b.rating - a.rating);\n  }\n\n  dispatch({\n    type: \"ORDEN_DESC_RATING\",\n    payload: {\n      videojuegosOrden,\n      name: type\n    }\n  });\n}; //23)\n\nexport function searchVideogames(name) {\n  return dispatch => fetch(`http://localhost:3001/videogames?name=${name}`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"BUSCAR_VIDEOJUEGOS\",\n      payload: json\n    });\n  });\n} //26)\n\nexport function createVideogame(obj) {\n  return dispatch => fetch(\"http://localhost:3001/videogame\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(obj)\n  }).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"CREAR_VIDEOJUEGO\",\n      payload: json\n    });\n  });\n} //30)\n\nexport function getVideogameById(id) {\n  console.log(id);\n  return dispatch => fetch(`http://localhost:3001/videogame/${id}`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_VIDEOJUEGO_X_ID\",\n      payload: json\n    });\n  });\n} //ESTOS NO SE SI LOS USO:\n\nexport const filterByGenre = genres => (dispatch, getState) => {\n  let juegosFiltrados = [];\n\n  if (genres === \"All\") {\n    juegosFiltrados = getState().videojuegos;\n  } else {\n    juegosFiltrados = getState().videojuegos.filter(game => game.genres.includes(genres));\n  }\n\n  ;\n  dispatch({\n    type: \"FILTRO_X_GENERO\",\n    payload: {\n      genres,\n      videojuegoGenero: juegosFiltrados\n    }\n  });\n};\nexport const resetAll = () => {\n  return dispatch => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n}; // este va antes del //30)\n\nexport function getGenres() {\n  return dispatch => fetch(`http://localhost:3001/genres`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_GENEROS\",\n      payload: json\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/TATAC/OneDrive/Desktop/HENRY/PROYECTO INDIVIDUAL/FINAL/PI-Videogames (1)/PI-Videogames-main/client/src/actions/index.js"],"names":["getVideogames","dispatch","fetch","then","response","json","type","payload","orderByCreator","source","getState","videojuegos","filter","G","orderAsc","filtered","filteredVideogames","videogamesOrder","sort","a","b","name","rating","orderDesc","filtrado","videojuegosOrden","searchVideogames","resp","createVideogame","obj","method","headers","Accept","body","JSON","stringify","getVideogameById","id","console","log","filterByGenre","genres","juegosFiltrados","game","includes","videojuegoGenero","resetAll","getGenres"],"mappings":"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","sourcesContent":["// 12)\r\n\r\nexport function getVideogames() {\r\n    return function (dispatch) {\r\n      return fetch(`http://localhost:3001/videogames`)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          dispatch({ type: \"GET_VIDEOJUEGOS\", payload: json });\r\n        });\r\n    };\r\n  }\r\n//   20)\r\n  \r\n  export const orderByCreator = (source) => (dispatch, getState) => {\r\n    const videojuegos = getState().videojuegos.filter(function (G) {\r\n        return G.source === source\r\n      });\r\n    dispatch({\r\n      type: \"ORDEN_X_CREADO\",\r\n      payload: {\r\n        videojuegos,\r\n        source,\r\n      },\r\n    });\r\n  };\r\n\r\n//   21)\r\nexport const orderAsc = (type) => (dispatch, getState) => {\r\n    const filtered = getState().filteredVideogames;\r\n    let videogamesOrder = []\r\n  \r\n      if (type === \"asc_name\") {\r\n        videogamesOrder = filtered.sort((a, b) => {\r\n          if (a.name > b.name) return 1;\r\n          if (a.name < b.name) return -1;\r\n          return 0;\r\n        });\r\n      } else if (type === \"asc_rating\") {\r\n        videogamesOrder = filtered.sort(\r\n          (a, b) => a.rating - b.rating\r\n        );\r\n      }\r\n      dispatch({\r\n        type: \"ORDEN_ASC_RATING\",\r\n        payload: {\r\n          videogamesOrder,\r\n          name: type,\r\n        },\r\n      });\r\n  }\r\n  \r\n  \r\n  export const orderDesc = (type) => (dispatch, getState) => {\r\n    const filtrado = getState().filteredVideogames;\r\n    let videojuegosOrden = []\r\n      \r\n      if (type === \"desc_name\") {\r\n        videojuegosOrden = filtrado.sort((a, b) => {\r\n          if (a.name < b.name) return 1;\r\n          if (a.name > b.name) return -1;\r\n          return 0;\r\n        });\r\n      } else if (type === \"desc_rating\") {\r\n        videojuegosOrden = filtrado.sort(\r\n          (a, b) => b.rating - a.rating\r\n        );\r\n      }\r\n      dispatch({\r\n        type: \"ORDEN_DESC_RATING\",\r\n        payload: {\r\n          videojuegosOrden,\r\n          name: type,\r\n        },\r\n      });\r\n  }\r\n\r\n//23)\r\n  export function searchVideogames(name) {\r\n    return (dispatch) =>\r\n      fetch(`http://localhost:3001/videogames?name=${name}`)\r\n        .then((resp) => resp.json())\r\n        .then((json) => {\r\n          dispatch({\r\n            type: \"BUSCAR_VIDEOJUEGOS\",\r\n            payload: json,\r\n          });\r\n        });\r\n  }\r\n\r\n  //26)\r\n  export function createVideogame(obj) {\r\n    return (dispatch) =>\r\n      fetch(\"http://localhost:3001/videogame\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(obj),\r\n      })\r\n        .then((resp) => resp.json())\r\n        .then((json) => {\r\n          dispatch({\r\n            type: \"CREAR_VIDEOJUEGO\",\r\n            payload: json,\r\n          });\r\n        });\r\n  }\r\n  //30)\r\n  export function getVideogameById(id) {\r\n    console.log(id)\r\n    return (dispatch) =>\r\n      fetch(`http://localhost:3001/videogame/${id}`)\r\n        .then((resp) => resp.json())\r\n        .then((json) => {\r\n          dispatch({\r\n            type: \"GET_VIDEOJUEGO_X_ID\",\r\n            payload: json,\r\n          });\r\n        });\r\n  }\r\n\r\n  //ESTOS NO SE SI LOS USO:\r\n  export const filterByGenre = (genres) => (dispatch, getState) => {\r\n    let juegosFiltrados = [];\r\n  \r\n    if (genres === \"All\") {\r\n      juegosFiltrados = getState().videojuegos;\r\n    } else {\r\n      juegosFiltrados = getState().videojuegos.filter((game) =>\r\n        (game.genres).includes(genres)\r\n      )\r\n    };\r\n    dispatch({\r\n      type: \"FILTRO_X_GENERO\",\r\n      payload: {\r\n        genres,\r\n        videojuegoGenero: juegosFiltrados,\r\n      },\r\n    });\r\n  };\r\n\r\n  export const resetAll = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"RESET\",\r\n    });\r\n  };\r\n};\r\n\r\n// este va antes del //30)\r\nexport function getGenres() {\r\n  return (dispatch) =>\r\n    fetch(`http://localhost:3001/genres`)\r\n      .then((resp) => resp.json())\r\n      .then((json) => {\r\n        dispatch({\r\n          type: \"GET_GENEROS\",\r\n          payload: json,\r\n        });\r\n      });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}