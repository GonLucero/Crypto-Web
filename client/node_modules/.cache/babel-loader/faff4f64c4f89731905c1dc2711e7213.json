{"ast":null,"code":"// ACA hago la conexion entre el front y el back\nimport axios from 'axios'; // 12)\n// el componente Principal: va a hacer un get para todos los videojuegos:\n\nexport function getVideojuegos() {\n  return function (dispatch) {\n    // le pongo la ruta que me trae todos los personajes\n    return fetch(`http://localhost:3001/videogames`).then(response => response.json()).then(json => {\n      dispatch({\n        type: \"GET_VIDEOJUEGOS\",\n        payload: json\n      });\n    });\n  };\n} //   20)CREO UNA ACCION PARA EL FILTRADO SEGUN DB / API O CREADO\n\nexport const ordenXCreado = source => (dispatch, getState) => {\n  const videojuegos = getState().videojuegos.filter(function (v) {\n    // filtro los juegos que solo tienen el source que me llega x payload\n    return v.source === source;\n  });\n  dispatch({\n    type: \"ORDEN_X_CREADO\",\n    payload: {\n      videojuegos,\n      source\n    }\n  });\n}; //   21)\n\nexport const ordenAsc = type => (dispatch, getState) => {\n  const filtrado = getState().videojuegosFiltrados; // me traigo el estado \n\n  let videojuegosOrden = []; // declaro array vacio\n  // si el type que me pasan es asc_nombre\n\n  if (type === \"asc_nombre\") {\n    // agarro todos los juegos filtrados y los ordeno según el nombre\n    videojuegosOrden = filtrado.sort((a, b) => {\n      // sort compara 2 name, y los pone antes o despues del array\n      if (a.name > b.name) return 1;\n      if (a.name < b.name) return -1;\n      return 0;\n    }); // si el type es asc rating\n  } else if (type === \"asc_rating\") {\n    // sort compara 2 rating, y los pone antes o despues del array\n    videojuegosOrden = filtrado.sort((a, b) => a.rating - b.rating // dependiendo si es negativo o positivo el resultado, pone uno adelante y otro atrás\n    );\n  }\n\n  dispatch({\n    type: \"ORDEN_ASC_RATING\",\n    payload: {\n      videojuegosOrden,\n      name: type\n    }\n  });\n};\nexport const ordenDesc = type => (dispatch, getState) => {\n  const filtrado = getState().videojuegosFiltrados;\n  let videojuegosOrden = [];\n\n  if (type === \"desc_nombre\") {\n    videojuegosOrden = filtrado.sort((a, b) => {\n      // ordenamelo, pero en el sentido contrario\n      if (a.name < b.name) return 1;\n      if (a.name > b.name) return -1;\n      return 0;\n    });\n  } else if (type === \"desc_rating\") {\n    videojuegosOrden = filtrado.sort( // sort compara 2 rating, y los pone antes o despues del array\n    (a, b) => b.rating - a.rating);\n  }\n\n  dispatch({\n    type: \"ORDEN_DESC_RATING\",\n    payload: {\n      videojuegosOrden,\n      name: type\n    }\n  });\n}; //23)\n// export function buscarVideojuegos(name) { // pongo nombre en vez de payload, nombre es lo que el usuario escriba en la barra de busqueda\n//   return (dispatch) =>\n//     fetch(`http://localhost:3001/videogames?name=${name}`) // le paso lo que me llega x payload\n//       .then((resp) => resp.json())\n//       .then((json) => {\n//         dispatch({\n//           type: \"BUSCAR_VIDEOJUEGOS\",\n//           payload: json, // json es lo que me devuelve la ruta, una vez que se le asigna el nombre\n//         });\n//       });\n// }\n\nexport function buscarVideojuegos(name) {\n  return dispatch => axios.get(`http://localhost:3001/videogames?name=${name}`).then(response => {\n    return {\n      type: \"BUSCAR_VIDEOJUEGOS\",\n      payload: response.json\n    };\n  }).catch(err => {\n    console.log(err);\n  });\n} // con async:\n//   export function buscarVideojuegos(name){ // pongo nombre en vez de payload, nombre es lo que el usuario escriba en la barra de busqueda\n//     return async function (dispatch){\n//         try{\n//             var json = await axios.get(\"http://localhost:3001/videogames?name=\" + name) // le paso lo que me llega x payload\n//             return dispatch ({\n//                 type: \"BUSCAR_VIDEOJUEGOS\",\n//                 payload: json // json.data es lo que me devuelve la ruta, una vez que se le asigna el nombre\n//             })\n//         } catch(error){ // mando un error si llega a fallar\n//             console.log(error)\n//         }\n//     }\n// }\n// return function(dispatch){\n//   axios\n//   .get('http://localhost:3001/countries/')\n//   .then((response) => {\n//       return ({type: GET_ALL_COUNTRIES, payload: response.data})\n//   })\n//   .catch((err)=>{\n//       console.log(err)\n//   })\n// }\n// return async function(dispatch){\n//   try{\n//   const api = await axios.get('http://localhost:3001/countries/')\n//       dispatch({type: GET_ALL_COUNTRIES, payload: api.data})\n//   } catch (err){\n//       console.log(err)\n//   }\n// }\n//26)\n\nexport function crearVideojuego(obj) {\n  return async function (dispatch) {\n    const response = await axios.post(\"http://localhost:3001/videogame\", obj);\n    return response;\n  };\n} //30)\n\nexport function getVideojuegoXId(id) {\n  console.log(id);\n  return dispatch => fetch(`http://localhost:3001/videogame/${id}`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_VIDEOJUEGO_X_ID\",\n      payload: json\n    });\n  });\n} // acá recibo el genero seleccionado\n\nexport const filtradoXGenero = generos => (dispatch, getState) => {\n  let juegosFiltrados = []; // si el genero esta en all, me traigo todos los juegos y lo pongo en juegosfiltrados\n\n  if (generos === \"All\") {\n    juegosFiltrados = getState().videojuegos;\n  } else {\n    // si esta en otra posicion que no sea all, filtrame los juegos segun el genero\n    juegosFiltrados = getState().videojuegos.filter(v => v.genres.includes(generos));\n  }\n\n  ;\n  dispatch({\n    type: \"FILTRADO_X_GENERO\",\n    payload: {\n      generos,\n      videojuegoGenero: juegosFiltrados\n    }\n  });\n};\nexport const resetTodo = () => {\n  return dispatch => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n}; // acción que me trae todos los generos\n\nexport function getGeneros() {\n  return dispatch => fetch(`http://localhost:3001/genres`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_GENEROS\",\n      payload: json\n    });\n  });\n} // export function crearVideojuego(obj) { // el payload es lo que me llega desde el front\n//   return (dispatch) =>\n//     fetch(\"http://localhost:3001/videogame\", {\n//       method: \"POST\",\n//       headers: {\n//         Accept: \"application/json\",\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(obj),\n//     })\n//       .then((resp) => resp.json())\n//       .then((json) => {\n//         dispatch({\n//           type: \"CREAR_VIDEOJUEGO\",\n//           payload: json,\n//         });\n//       });\n// }","map":{"version":3,"sources":["C:/Users/TATAC/OneDrive/Desktop/HENRY/PROYECTO INDIVIDUAL/FINAL/PI-Videogames (1)/PI-Videogames-main/client/src/actions/index.js"],"names":["axios","getVideojuegos","dispatch","fetch","then","response","json","type","payload","ordenXCreado","source","getState","videojuegos","filter","v","ordenAsc","filtrado","videojuegosFiltrados","videojuegosOrden","sort","a","b","name","rating","ordenDesc","buscarVideojuegos","get","catch","err","console","log","crearVideojuego","obj","post","getVideojuegoXId","id","resp","filtradoXGenero","generos","juegosFiltrados","genres","includes","videojuegoGenero","resetTodo","getGeneros"],"mappings":"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","sourcesContent":["// ACA hago la conexion entre el front y el back\r\nimport axios from 'axios';\r\n\r\n// 12)\r\n// el componente Principal: va a hacer un get para todos los videojuegos:\r\n\r\nexport function getVideojuegos() {\r\n    return function (dispatch) {\r\n      // le pongo la ruta que me trae todos los personajes\r\n      return fetch(`http://localhost:3001/videogames`)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          dispatch({ type: \"GET_VIDEOJUEGOS\", payload: json });\r\n        });\r\n    };\r\n  }\r\n//   20)CREO UNA ACCION PARA EL FILTRADO SEGUN DB / API O CREADO\r\n  \r\n  export const ordenXCreado = (source) => (dispatch, getState) => {\r\n    const videojuegos = getState().videojuegos.filter(function (v) { // filtro los juegos que solo tienen el source que me llega x payload\r\n        return v.source === source\r\n      });\r\n    dispatch({\r\n      type: \"ORDEN_X_CREADO\",\r\n      payload: {\r\n        videojuegos,\r\n        source,\r\n      },\r\n    });\r\n  };\r\n\r\n//   21)\r\nexport const ordenAsc = (type) => (dispatch, getState) => {\r\n    const filtrado = getState().videojuegosFiltrados; // me traigo el estado \r\n    let videojuegosOrden = [] // declaro array vacio\r\n  \r\n    // si el type que me pasan es asc_nombre\r\n      if (type === \"asc_nombre\") {\r\n        // agarro todos los juegos filtrados y los ordeno según el nombre\r\n        videojuegosOrden = filtrado.sort((a, b) => { // sort compara 2 name, y los pone antes o despues del array\r\n          if (a.name > b.name) return 1;\r\n          if (a.name < b.name) return -1;\r\n          return 0;\r\n        });\r\n        // si el type es asc rating\r\n      } else if (type === \"asc_rating\") { // sort compara 2 rating, y los pone antes o despues del array\r\n        videojuegosOrden = filtrado.sort(\r\n          (a, b) => a.rating - b.rating // dependiendo si es negativo o positivo el resultado, pone uno adelante y otro atrás\r\n        );\r\n      }\r\n      dispatch({\r\n        type: \"ORDEN_ASC_RATING\",\r\n        payload: {\r\n          videojuegosOrden,\r\n          name: type,\r\n        },\r\n      });\r\n  }\r\n  \r\n  \r\n  export const ordenDesc = (type) => (dispatch, getState) => {\r\n    const filtrado = getState().videojuegosFiltrados;\r\n    let videojuegosOrden = []\r\n      \r\n      if (type === \"desc_nombre\") {\r\n        videojuegosOrden = filtrado.sort((a, b) => { // ordenamelo, pero en el sentido contrario\r\n          if (a.name < b.name) return 1;\r\n          if (a.name > b.name) return -1;\r\n          return 0;\r\n        });\r\n      } else if (type === \"desc_rating\") { \r\n        videojuegosOrden = filtrado.sort( // sort compara 2 rating, y los pone antes o despues del array\r\n          (a, b) => b.rating - a.rating\r\n        );\r\n      }\r\n      dispatch({\r\n        type: \"ORDEN_DESC_RATING\",\r\n        payload: {\r\n          videojuegosOrden,\r\n          name: type,\r\n        },\r\n      });\r\n  }\r\n\r\n//23)\r\n  // export function buscarVideojuegos(name) { // pongo nombre en vez de payload, nombre es lo que el usuario escriba en la barra de busqueda\r\n  //   return (dispatch) =>\r\n  //     fetch(`http://localhost:3001/videogames?name=${name}`) // le paso lo que me llega x payload\r\n  //       .then((resp) => resp.json())\r\n  //       .then((json) => {\r\n  //         dispatch({\r\n  //           type: \"BUSCAR_VIDEOJUEGOS\",\r\n  //           payload: json, // json es lo que me devuelve la ruta, una vez que se le asigna el nombre\r\n  //         });\r\n  //       });\r\n  // }\r\n\r\n  export function buscarVideojuegos(name) {\r\n    return (dispatch)=>\r\n      axios.get(`http://localhost:3001/videogames?name=${name}`)\r\n      .then((response) =>{\r\n        return ({type: \"BUSCAR_VIDEOJUEGOS\",\r\n                payload:response.json})\r\n      }).catch((err)=>{\r\n        console.log(err)\r\n      })\r\n    \r\n  }\r\n\r\n  // con async:\r\n//   export function buscarVideojuegos(name){ // pongo nombre en vez de payload, nombre es lo que el usuario escriba en la barra de busqueda\r\n//     return async function (dispatch){\r\n//         try{\r\n//             var json = await axios.get(\"http://localhost:3001/videogames?name=\" + name) // le paso lo que me llega x payload\r\n//             return dispatch ({\r\n//                 type: \"BUSCAR_VIDEOJUEGOS\",\r\n//                 payload: json // json.data es lo que me devuelve la ruta, una vez que se le asigna el nombre\r\n//             })\r\n//         } catch(error){ // mando un error si llega a fallar\r\n//             console.log(error)\r\n//         }\r\n//     }\r\n// }\r\n\r\n// return function(dispatch){\r\n//   axios\r\n//   .get('http://localhost:3001/countries/')\r\n//   .then((response) => {\r\n//       return ({type: GET_ALL_COUNTRIES, payload: response.data})\r\n//   })\r\n//   .catch((err)=>{\r\n//       console.log(err)\r\n//   })\r\n// }\r\n// return async function(dispatch){\r\n//   try{\r\n//   const api = await axios.get('http://localhost:3001/countries/')\r\n//       dispatch({type: GET_ALL_COUNTRIES, payload: api.data})\r\n//   } catch (err){\r\n//       console.log(err)\r\n//   }\r\n// }\r\n\r\n  //26)\r\n\r\n\r\nexport function crearVideojuego(obj){\r\n  return async function(dispatch){\r\n    const response = await axios.post(\"http://localhost:3001/videogame\",obj);\r\n    return response\r\n  }\r\n}\r\n\r\n\r\n  //30)\r\n  export function getVideojuegoXId(id) {\r\n    console.log(id)\r\n    return (dispatch) =>\r\n      fetch(`http://localhost:3001/videogame/${id}`)\r\n        .then((resp) => resp.json())\r\n        .then((json) => {\r\n          dispatch({\r\n            type: \"GET_VIDEOJUEGO_X_ID\",\r\n            payload: json,\r\n          });\r\n        });\r\n  }\r\n\r\n  // acá recibo el genero seleccionado\r\n  export const filtradoXGenero = (generos) => (dispatch, getState) => {\r\n    let juegosFiltrados = [];\r\n    // si el genero esta en all, me traigo todos los juegos y lo pongo en juegosfiltrados\r\n    if (generos === \"All\") {\r\n      juegosFiltrados = getState().videojuegos;\r\n    } else { // si esta en otra posicion que no sea all, filtrame los juegos segun el genero\r\n      juegosFiltrados = getState().videojuegos.filter((v) =>\r\n        (v.genres).includes(generos)\r\n      )\r\n    };\r\n    dispatch({\r\n      type: \"FILTRADO_X_GENERO\",\r\n      payload: {\r\n        generos,\r\n        videojuegoGenero: juegosFiltrados,\r\n      },\r\n    });\r\n  };\r\n\r\n\r\n  export const resetTodo = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"RESET\",\r\n    });\r\n  };\r\n};\r\n\r\n// acción que me trae todos los generos\r\nexport function getGeneros() {\r\n  return (dispatch) =>\r\n    fetch(`http://localhost:3001/genres`)\r\n      .then((resp) => resp.json())\r\n      .then((json) => {\r\n        dispatch({\r\n          type: \"GET_GENEROS\",\r\n          payload: json,\r\n        });\r\n      });\r\n}\r\n\r\n  // export function crearVideojuego(obj) { // el payload es lo que me llega desde el front\r\n  //   return (dispatch) =>\r\n  //     fetch(\"http://localhost:3001/videogame\", {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         Accept: \"application/json\",\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       body: JSON.stringify(obj),\r\n  //     })\r\n  //       .then((resp) => resp.json())\r\n  //       .then((json) => {\r\n  //         dispatch({\r\n  //           type: \"CREAR_VIDEOJUEGO\",\r\n  //           payload: json,\r\n  //         });\r\n  //       });\r\n  // }"]},"metadata":{},"sourceType":"module"}