{"ast":null,"code":"export function getVideogames() {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/videogames`).then(response => response.json()).then(json => {\n      dispatch({\n        type: \"GET_VIDEOGAMES\",\n        payload: json\n      });\n    });\n  };\n}\nexport function searchVideogames(name) {\n  return dispatch => fetch(`http://localhost:3001/videogames?name=${name}`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"SEARCH_VIDEOGAMES\",\n      payload: json\n    });\n  });\n}\nexport function getVideogameById(id) {\n  return dispatch => fetch(`http://localhost:3001/videogame/${id}`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_VIDEOGAME_BY_ID\",\n      payload: json\n    });\n  });\n}\nexport function getGenres() {\n  return dispatch => fetch(`http://localhost:3001/genres`).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"GET_GENRES\",\n      payload: json\n    });\n  });\n}\nexport function createVideogame(obj) {\n  return dispatch => fetch(\"http://localhost:3001/videogame\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(obj)\n  }).then(resp => resp.json()).then(json => {\n    dispatch({\n      type: \"CREATE_VIDEOGAME\",\n      payload: json\n    });\n  });\n}\nexport const resetAll = () => {\n  return dispatch => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n};\nexport const filterByGenre = genres => (dispatch, getState) => {\n  let filteredGames = [];\n\n  if (genres === \"All\") {\n    filteredGames = getState().videogames;\n  } else {\n    filteredGames = getState().videogames.filter(game => game.genres.includes(genres));\n  }\n\n  ;\n  dispatch({\n    type: \"FILTER_BY_GENRE\",\n    payload: {\n      genres,\n      videogameGenre: filteredGames\n    }\n  });\n};\nexport const orderAsc = type => (dispatch, getState) => {\n  const filtered = getState().filteredVideogames;\n  let videogamesOrder = [];\n\n  if (type === \"asc_name\") {\n    videogamesOrder = filtered.sort((a, b) => {\n      if (a.name > b.name) return 1;\n      if (a.name < b.name) return -1;\n      return 0;\n    });\n  } else if (type === \"asc_rating\") {\n    videogamesOrder = filtered.sort((a, b) => a.rating - b.rating);\n  }\n\n  dispatch({\n    type: \"ORDER_ASC_RATING\",\n    payload: {\n      videogamesOrder,\n      name: type\n    }\n  });\n};\nexport const orderDesc = type => (dispatch, getState) => {\n  const filtered = getState().filteredVideogames;\n  let videogamesOrder = [];\n\n  if (type === \"desc_name\") {\n    videogamesOrder = filtered.sort((a, b) => {\n      if (a.name < b.name) return 1;\n      if (a.name > b.name) return -1;\n      return 0;\n    });\n  } else if (type === \"desc_rating\") {\n    videogamesOrder = filtered.sort((a, b) => b.rating - a.rating);\n  }\n\n  dispatch({\n    type: \"ORDER_DESC_RATING\",\n    payload: {\n      videogamesOrder,\n      name: type\n    }\n  });\n};\nexport const orderByCreator = source => (dispatch, getState) => {\n  const videogames = getState().videogames.filter(function (G) {\n    return G.source === source;\n  });\n  dispatch({\n    type: \"ORDER_BY_CREATOR\",\n    payload: {\n      videogames,\n      source\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/TATAC/OneDrive/Desktop/HENRY/PROYECTO INDIVIDUAL/Videogames-main/Videogames-main/client/src/actions/index.js"],"names":["getVideogames","dispatch","fetch","then","response","json","type","payload","searchVideogames","name","resp","getVideogameById","id","getGenres","createVideogame","obj","method","headers","Accept","body","JSON","stringify","resetAll","filterByGenre","genres","getState","filteredGames","videogames","filter","game","includes","videogameGenre","orderAsc","filtered","filteredVideogames","videogamesOrder","sort","a","b","rating","orderDesc","orderByCreator","source","G"],"mappings":"AAAA,OAAO,SAASA,aAAT,GAAyB;AAC9B,SAAO,UAAUC,QAAV,EAAoB;AACzB,WAAOC,KAAK,CAAE,kCAAF,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAE,gBAAR;AAA0BC,QAAAA,OAAO,EAAEF;AAAnC,OAAD,CAAR;AACD,KAJI,CAAP;AAKD,GAND;AAOD;AAED,OAAO,SAASG,gBAAT,CAA0BC,IAA1B,EAAgC;AACrC,SAAQR,QAAD,IACLC,KAAK,CAAE,yCAAwCO,IAAK,EAA/C,CAAL,CACGN,IADH,CACSO,IAAD,IAAUA,IAAI,CAACL,IAAL,EADlB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPH,CADF;AASD;AAED,OAAO,SAASM,gBAAT,CAA0BC,EAA1B,EAA8B;AACnC,SAAQX,QAAD,IACLC,KAAK,CAAE,mCAAkCU,EAAG,EAAvC,CAAL,CACGT,IADH,CACSO,IAAD,IAAUA,IAAI,CAACL,IAAL,EADlB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,qBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPH,CADF;AASD;AAED,OAAO,SAASQ,SAAT,GAAqB;AAC1B,SAAQZ,QAAD,IACLC,KAAK,CAAE,8BAAF,CAAL,CACGC,IADH,CACSO,IAAD,IAAUA,IAAI,CAACL,IAAL,EADlB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAPH,CADF;AASD;AAED,OAAO,SAASS,eAAT,CAAyBC,GAAzB,EAA8B;AACnC,SAAQd,QAAD,IACLC,KAAK,CAAC,iCAAD,EAAoC;AACvCc,IAAAA,MAAM,EAAE,MAD+B;AAEvCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAF8B;AAMvCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,GAAf;AANiC,GAApC,CAAL,CAQGZ,IARH,CAQSO,IAAD,IAAUA,IAAI,CAACL,IAAL,EARlB,EASGF,IATH,CASSE,IAAD,IAAU;AACdJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAdH,CADF;AAgBD;AAED,OAAO,MAAMiB,QAAQ,GAAG,MAAM;AAC5B,SAAQrB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;AAKD,CANM;AASP,OAAO,MAAMiB,aAAa,GAAIC,MAAD,IAAY,CAACvB,QAAD,EAAWwB,QAAX,KAAwB;AAC/D,MAAIC,aAAa,GAAG,EAApB;;AAEA,MAAIF,MAAM,KAAK,KAAf,EAAsB;AACpBE,IAAAA,aAAa,GAAGD,QAAQ,GAAGE,UAA3B;AACD,GAFD,MAEO;AACLD,IAAAA,aAAa,GAAGD,QAAQ,GAAGE,UAAX,CAAsBC,MAAtB,CAA8BC,IAAD,IAC1CA,IAAI,CAACL,MAAN,CAAcM,QAAd,CAAuBN,MAAvB,CADc,CAAhB;AAGD;;AAAA;AACDvB,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE,iBADC;AAEPC,IAAAA,OAAO,EAAE;AACPiB,MAAAA,MADO;AAEPO,MAAAA,cAAc,EAAEL;AAFT;AAFF,GAAD,CAAR;AAOD,CAjBM;AAoBP,OAAO,MAAMM,QAAQ,GAAI1B,IAAD,IAAU,CAACL,QAAD,EAAWwB,QAAX,KAAwB;AACxD,QAAMQ,QAAQ,GAAGR,QAAQ,GAAGS,kBAA5B;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEE,MAAI7B,IAAI,KAAK,UAAb,EAAyB;AACvB6B,IAAAA,eAAe,GAAGF,QAAQ,CAACG,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxC,UAAID,CAAC,CAAC5B,IAAF,GAAS6B,CAAC,CAAC7B,IAAf,EAAqB,OAAO,CAAP;AACrB,UAAI4B,CAAC,CAAC5B,IAAF,GAAS6B,CAAC,CAAC7B,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,aAAO,CAAP;AACD,KAJiB,CAAlB;AAKD,GAND,MAMO,IAAIH,IAAI,KAAK,YAAb,EAA2B;AAChC6B,IAAAA,eAAe,GAAGF,QAAQ,CAACG,IAAT,CAChB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MADP,CAAlB;AAGD;;AACDtC,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE,kBADC;AAEPC,IAAAA,OAAO,EAAE;AACP4B,MAAAA,eADO;AAEP1B,MAAAA,IAAI,EAAEH;AAFC;AAFF,GAAD,CAAR;AAOH,CAtBM;AAyBP,OAAO,MAAMkC,SAAS,GAAIlC,IAAD,IAAU,CAACL,QAAD,EAAWwB,QAAX,KAAwB;AACzD,QAAMQ,QAAQ,GAAGR,QAAQ,GAAGS,kBAA5B;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEE,MAAI7B,IAAI,KAAK,WAAb,EAA0B;AACxB6B,IAAAA,eAAe,GAAGF,QAAQ,CAACG,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxC,UAAID,CAAC,CAAC5B,IAAF,GAAS6B,CAAC,CAAC7B,IAAf,EAAqB,OAAO,CAAP;AACrB,UAAI4B,CAAC,CAAC5B,IAAF,GAAS6B,CAAC,CAAC7B,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,aAAO,CAAP;AACD,KAJiB,CAAlB;AAKD,GAND,MAMO,IAAIH,IAAI,KAAK,aAAb,EAA4B;AACjC6B,IAAAA,eAAe,GAAGF,QAAQ,CAACG,IAAT,CAChB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,MAAF,GAAWF,CAAC,CAACE,MADP,CAAlB;AAGD;;AACDtC,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE,mBADC;AAEPC,IAAAA,OAAO,EAAE;AACP4B,MAAAA,eADO;AAEP1B,MAAAA,IAAI,EAAEH;AAFC;AAFF,GAAD,CAAR;AAOH,CAtBM;AAyBP,OAAO,MAAMmC,cAAc,GAAIC,MAAD,IAAY,CAACzC,QAAD,EAAWwB,QAAX,KAAwB;AAChE,QAAME,UAAU,GAAGF,QAAQ,GAAGE,UAAX,CAAsBC,MAAtB,CAA6B,UAAUe,CAAV,EAAa;AACzD,WAAOA,CAAC,CAACD,MAAF,KAAaA,MAApB;AACD,GAFgB,CAAnB;AAGAzC,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE,kBADC;AAEPC,IAAAA,OAAO,EAAE;AACPoB,MAAAA,UADO;AAEPe,MAAAA;AAFO;AAFF,GAAD,CAAR;AAOD,CAXM","sourcesContent":["export function getVideogames() {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/videogames`)\n      .then(response => response.json())\n      .then(json => {\n        dispatch({ type: \"GET_VIDEOGAMES\", payload: json });\n      });\n  };\n}\n\nexport function searchVideogames(name) {\n  return (dispatch) =>\n    fetch(`http://localhost:3001/videogames?name=${name}`)\n      .then((resp) => resp.json())\n      .then((json) => {\n        dispatch({\n          type: \"SEARCH_VIDEOGAMES\",\n          payload: json,\n        });\n      });\n}\n\nexport function getVideogameById(id) {\n  return (dispatch) =>\n    fetch(`http://localhost:3001/videogame/${id}`)\n      .then((resp) => resp.json())\n      .then((json) => {\n        dispatch({\n          type: \"GET_VIDEOGAME_BY_ID\",\n          payload: json,\n        });\n      });\n}\n\nexport function getGenres() {\n  return (dispatch) =>\n    fetch(`http://localhost:3001/genres`)\n      .then((resp) => resp.json())\n      .then((json) => {\n        dispatch({\n          type: \"GET_GENRES\",\n          payload: json,\n        });\n      });\n}\n\nexport function createVideogame(obj) {\n  return (dispatch) =>\n    fetch(\"http://localhost:3001/videogame\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(obj),\n    })\n      .then((resp) => resp.json())\n      .then((json) => {\n        dispatch({\n          type: \"CREATE_VIDEOGAME\",\n          payload: json,\n        });\n      });\n}\n\nexport const resetAll = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"RESET\",\n    });\n  };\n};\n\n\nexport const filterByGenre = (genres) => (dispatch, getState) => {\n  let filteredGames = [];\n\n  if (genres === \"All\") {\n    filteredGames = getState().videogames;\n  } else {\n    filteredGames = getState().videogames.filter((game) =>\n      (game.genres).includes(genres)\n    )\n  };\n  dispatch({\n    type: \"FILTER_BY_GENRE\",\n    payload: {\n      genres,\n      videogameGenre: filteredGames,\n    },\n  });\n};\n\n\nexport const orderAsc = (type) => (dispatch, getState) => {\n  const filtered = getState().filteredVideogames;\n  let videogamesOrder = []\n\n    if (type === \"asc_name\") {\n      videogamesOrder = filtered.sort((a, b) => {\n        if (a.name > b.name) return 1;\n        if (a.name < b.name) return -1;\n        return 0;\n      });\n    } else if (type === \"asc_rating\") {\n      videogamesOrder = filtered.sort(\n        (a, b) => a.rating - b.rating\n      );\n    }\n    dispatch({\n      type: \"ORDER_ASC_RATING\",\n      payload: {\n        videogamesOrder,\n        name: type,\n      },\n    });\n}\n\n\nexport const orderDesc = (type) => (dispatch, getState) => {\n  const filtered = getState().filteredVideogames;\n  let videogamesOrder = []\n    \n    if (type === \"desc_name\") {\n      videogamesOrder = filtered.sort((a, b) => {\n        if (a.name < b.name) return 1;\n        if (a.name > b.name) return -1;\n        return 0;\n      });\n    } else if (type === \"desc_rating\") {\n      videogamesOrder = filtered.sort(\n        (a, b) => b.rating - a.rating\n      );\n    }\n    dispatch({\n      type: \"ORDER_DESC_RATING\",\n      payload: {\n        videogamesOrder,\n        name: type,\n      },\n    });\n}\n\n\nexport const orderByCreator = (source) => (dispatch, getState) => {\n  const videogames = getState().videogames.filter(function (G) {\n      return G.source === source\n    });\n  dispatch({\n    type: \"ORDER_BY_CREATOR\",\n    payload: {\n      videogames,\n      source,\n    },\n  });\n};"]},"metadata":{},"sourceType":"module"}