{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TATAC\\\\OneDrive\\\\Desktop\\\\HENRY\\\\PROYECTO INDIVIDUAL\\\\FINAL\\\\PI-Videogames (1)\\\\PI-Videogames-main\\\\client\\\\src\\\\Componentes\\\\BarradeBusqueda.jsx\",\n    _s = $RefreshSig$();\n\n//25)\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { buscarVideojuegos } from \"../actions/index\";\nimport Videojuegos from \"../Componentes/Videojuegos\";\nimport { Pagination } from \"../Componentes/Paginado\";\nimport \"../EstilosCss/BarradeBusqueda.css\";\nimport NavBar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n\n  const dispatch = useDispatch();\n  let {\n    name\n  } = useParams(); // me traigo el nombre, que queda escrito en la url ->http://localhost:3000/results/name\n  // en esta constate me guardo el estado, con la informacion de los resultados de la busqueda\n\n  const buscarVideojuego = useSelector(state => state.buscarVideojuegoXNombre); // cada vez que cambie el name, se va a despachar la accion de traerme la info con ese nombre\n\n  useEffect(() => {\n    dispatch(buscarVideojuegos(name));\n  }, [name]); // Paginacion\n\n  function paginar(e, num) {\n    e.preventDefault(); // para que no se actualice la pagina al activar el evento\n\n    setPagina(num); // al activar paginar, se setea el estado con el numero de pagina\n  } // creo un estado local pagina, inicialmente se encuentra en 1\n\n\n  const [pagina, setPagina] = useState(1); // creo un estado local videojuegosXPag,\n\n  const [videojuegosXPag] = useState(3); // acá seteo la cantidad de juegos a mostrar en la busqueda\n\n  let ultimoJuegoXPag = pagina * videojuegosXPag; // el ultimo juego es la pagina x cantidad de juegos\n\n  let primerJuegoXPag = ultimoJuegoXPag - videojuegosXPag; // el primer juego , empieza desde 0\n\n  let juegosPaginaActual = buscarVideojuego.slice(primerJuegoXPag, ultimoJuegoXPag); // la info la corto con solo lo que voy a mostrar x pagina\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: buscarVideojuego.length > 0 ?\n    /*#__PURE__*/\n    // si hay resultadosen la busqueda, renderizo:\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbarrr\",\n        children: /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Search Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Videojuegos, {\n        videojuegos: juegosPaginaActual\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        videojuegosXPag: videojuegosXPag,\n        totalVideojuegos: buscarVideojuego.length,\n        paginado: paginar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) // Sino dejo el gif cargando\n    : /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img2\",\n      src: \"https://www.alpha-editorial.com/images/loading.gif\",\n      alt: \"Link caido\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"2p0CI6pIOPMnnkOxUHkezs0IGMw=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = Search;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/TATAC/OneDrive/Desktop/HENRY/PROYECTO INDIVIDUAL/FINAL/PI-Videogames (1)/PI-Videogames-main/client/src/Componentes/BarradeBusqueda.jsx"],"names":["React","useEffect","useState","useParams","useDispatch","useSelector","buscarVideojuegos","Videojuegos","Pagination","NavBar","Search","dispatch","name","buscarVideojuego","state","buscarVideojuegoXNombre","paginar","e","num","preventDefault","setPagina","pagina","videojuegosXPag","ultimoJuegoXPag","primerJuegoXPag","juegosPaginaActual","slice","length"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAO,mCAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAI;AAAEQ,IAAAA;AAAF,MAAWT,SAAS,EAAxB,CAF+B,CAEJ;AAE3B;;AACA,QAAMU,gBAAgB,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,uBAAlB,CAApC,CAL+B,CAO/B;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAACL,iBAAiB,CAACM,IAAD,CAAlB,CAAR;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT,CAR+B,CAY/B;;AACA,WAASI,OAAT,CAAiBC,CAAjB,EAAoBC,GAApB,EAAyB;AACvBD,IAAAA,CAAC,CAACE,cAAF,GADuB,CACH;;AACpBC,IAAAA,SAAS,CAACF,GAAD,CAAT,CAFuB,CAEP;AACjB,GAhB8B,CAkB/B;;;AACA,QAAM,CAACG,MAAD,EAASD,SAAT,IAAsBlB,QAAQ,CAAC,CAAD,CAApC,CAnB+B,CAoB/B;;AACA,QAAM,CAACoB,eAAD,IAAoBpB,QAAQ,CAAC,CAAD,CAAlC,CArB+B,CAqBQ;;AAEvC,MAAIqB,eAAe,GAAGF,MAAM,GAAGC,eAA/B,CAvB+B,CAuBiB;;AAChD,MAAIE,eAAe,GAAGD,eAAe,GAAGD,eAAxC,CAxB+B,CAwB0B;;AACzD,MAAIG,kBAAkB,GAAGZ,gBAAgB,CAACa,KAAjB,CAAuBF,eAAvB,EAAwCD,eAAxC,CAAzB,CAzB+B,CAyBoD;;AAEnF,sBAEE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,cAEKV,gBAAgB,CAACc,MAAjB,GAA0B,CAA1B;AAAA;AAA+B;AAChC;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BAA0B,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAA1B;AAAA;AAAA;AAAA;AAAA,cADA,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAKf;AAAL;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAE,WAAF;AAAc,QAAA,WAAW,EAAEa;AAA3B;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,UAAD;AACE,QAAA,eAAe,EAAEH,eADnB;AAEE,QAAA,gBAAgB,EAAET,gBAAgB,CAACc,MAFrC;AAGE,QAAA,QAAQ,EAAEX;AAHZ;AAAA;AAAA;AAAA;AAAA,cALF;AAAA,oBADC,CAYD;AAZC,mBAaE;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAwB,MAAA,GAAG,EAAC,oDAA5B;AAAiF,MAAA,GAAG,EAAC;AAArF;AAAA;AAAA;AAAA;AAAA;AAfP;AAAA;AAAA;AAAA;AAAA,UAFF;AAqBD;;GAhDuBN,M;UACLN,W,EACFD,S,EAGUE,W;;;KALHK,M;AAgDvB","sourcesContent":["//25)\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { buscarVideojuegos } from \"../actions/index\";\r\nimport Videojuegos from \"../Componentes/Videojuegos\";\r\nimport { Pagination } from \"../Componentes/Paginado\";\r\nimport \"../EstilosCss/BarradeBusqueda.css\";\r\nimport NavBar from \"./Navbar\";\r\n\r\nexport default function Search() {\r\n  const dispatch = useDispatch();\r\n  let { name } = useParams() // me traigo el nombre, que queda escrito en la url ->http://localhost:3000/results/name\r\n\r\n  // en esta constate me guardo el estado, con la informacion de los resultados de la busqueda\r\n  const buscarVideojuego = useSelector((state) => state.buscarVideojuegoXNombre);\r\n\r\n  // cada vez que cambie el name, se va a despachar la accion de traerme la info con ese nombre\r\n  useEffect(() => {\r\n    dispatch(buscarVideojuegos(name));\r\n  }, [name]); \r\n  \r\n  // Paginacion\r\n  function paginar(e, num) {\r\n    e.preventDefault(); // para que no se actualice la pagina al activar el evento\r\n    setPagina(num); // al activar paginar, se setea el estado con el numero de pagina\r\n  }\r\n\r\n  // creo un estado local pagina, inicialmente se encuentra en 1\r\n  const [pagina, setPagina] = useState(1);\r\n  // creo un estado local videojuegosXPag,\r\n  const [videojuegosXPag] = useState(3); // acá seteo la cantidad de juegos a mostrar en la busqueda\r\n\r\n  let ultimoJuegoXPag = pagina * videojuegosXPag; // el ultimo juego es la pagina x cantidad de juegos\r\n  let primerJuegoXPag = ultimoJuegoXPag - videojuegosXPag; // el primer juego , empieza desde 0\r\n  let juegosPaginaActual = buscarVideojuego.slice(primerJuegoXPag, ultimoJuegoXPag); // la info la corto con solo lo que voy a mostrar x pagina\r\n\r\n  return (\r\n    \r\n    <div className=\"search\">\r\n      \r\n        {buscarVideojuego.length > 0 ?  // si hay resultadosen la busqueda, renderizo:\r\n        <>\r\n        <div className=\"navbarrr\"><NavBar/></div> \r\n          <h1>Search Results:</h1>\r\n          <h2>{name}</h2> \r\n          < Videojuegos videojuegos={juegosPaginaActual} />\r\n          <Pagination\r\n            videojuegosXPag={videojuegosXPag}\r\n            totalVideojuegos={buscarVideojuego.length}\r\n            paginado={paginar}\r\n          />\r\n        </>\r\n        // Sino dejo el gif cargando\r\n        :  <img className = \"img2\" src=\"https://www.alpha-editorial.com/images/loading.gif\" alt=\"Link caido\"/>\r\n        }\r\n    </div>\r\n  )\r\n};"]},"metadata":{},"sourceType":"module"}